name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: ["**"]
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start services (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --build --remove-orphans --quiet-pull
          docker compose ps

      - name: Detect services and URL
        shell: bash
        run: |
          set -euo pipefail
          WEB_SVC="apache"
          PHP_SVC="php"
          DB_SVC="mysql"

          # Autodetect if names differ
          if ! docker compose ps --services | grep -qx "$PHP_SVC"; then
            PHP_SVC=""
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'command -v php >/dev/null 2>&1' 2>/dev/null; then
                PHP_SVC="$s"; break
              fi
            done
          fi
          if ! docker compose ps --services | grep -qx "$WEB_SVC"; then
            WEB_SVC="$(docker compose ps --services | head -n1)"
          fi
          if ! docker compose ps --services | grep -qx "$DB_SVC"; then
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'test -d /var/lib/mysql || test -d /bitnami/mariadb' >/dev/null 2>&1; then
                DB_SVC="$s"; break
              fi
            done
          fi
          [ -z "$PHP_SVC" ] && { echo "::error::No container with PHP CLI found"; exit 1; }

          echo "WEB_SVC=$WEB_SVC" >> "$GITHUB_ENV"
          echo "PHP_SVC=$PHP_SVC" >> "$GITHUB_ENV"
          echo "DB_SVC=$DB_SVC"   >> "$GITHUB_ENV"

          # Find installer
          INSTALLER=""
          for p in /var/www/upload/install/cli_install.php /var/www/html/upload/install/cli_install.php; do
            if docker compose exec -T "$PHP_SVC" sh -lc "test -f $p"; then INSTALLER="$p"; break; fi
          done
          [ -z "$INSTALLER" ] && { echo "::error::Could not find upload/install/cli_install.php"; exit 1; }
          echo "INSTALLER=$INSTALLER" >> "$GITHUB_ENV"

          # Resolve URL
          PORT="$(docker compose port "$WEB_SVC" 80 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)"
          if [ -z "$PORT" ]; then
            PORT="$(docker compose port "$WEB_SVC" 8080 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)"
          fi
          if [ -z "$PORT" ] || [ "$PORT" = "80" ]; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost:$PORT" >> "$GITHUB_ENV"
          fi

      - name: Wait for DB to be ready
        shell: bash
        run: |
          set -eo pipefail
          : "${DB_SVC:=mysql}"
          CID="$(docker compose ps -q "$DB_SVC")"
          if [ -z "$CID" ]; then
            echo "::error::Cannot find DB container for service '$DB_SVC'"; docker compose ps; exit 1
          fi
          echo "Waiting for DB container ($DB_SVC) healthcheck…"
          for i in {1..60}; do
            STATUS="$(docker inspect -f '{{.State.Health.Status}}' "$CID" 2>/dev/null || echo unknown)"
            if [ "$STATUS" = "healthy" ]; then echo "DB is healthy."; break; fi
            echo "DB health: $STATUS ($i/60)"; sleep 2
            if [ "$i" -eq 60 ]; then
              echo "::warning::Healthcheck not healthy after timeout; trying mysqladmin ping…"
              docker compose exec -T "$DB_SVC" sh -lc \
                "mysqladmin ping -h 127.0.0.1 --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot -p\${MYSQL_ROOT_PASSWORD:-\${MARIADB_ROOT_PASSWORD:-}} --silent" \
                || { echo '::error::DB did not respond to mysqladmin ping'; docker compose logs --no-color --tail=200 "$DB_SVC"; exit 1; }
              break
            fi
          done

      - name: Prepare config files & permissions (inside PHP container)
        shell: bash
        run: |
          set -euo pipefail
          : "${PHP_SVC:=php}"
          docker compose exec -T "$PHP_SVC" sh -lc '
            set -e
            ROOT=""
            for b in /var/www/html /var/www; do
              if [ -f "$b/upload/config-dist.php" ]; then ROOT="$b"; break; fi
            done
            [ -z "$ROOT" ] && { echo "Cannot locate /var/www*/upload"; exit 1; }
            cp -n "$ROOT/upload/config-dist.php" "$ROOT/upload/config.php" || true
            cp -n "$ROOT/upload/admin/config-dist.php" "$ROOT/upload/admin/config.php" || true
            chmod 666 "$ROOT/upload/config.php" "$ROOT/upload/admin/config.php" || true
            chown -R www-data:www-data "$ROOT/upload" || true
          '

      - name: Install OpenCart via CLI (verbose & resilient)
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Using PHP_SVC=$PHP_SVC  DB_SVC=$DB_SVC  LOCAL_BASE_URL=$LOCAL_BASE_URL"
          echo "Installer path: $INSTALLER"

          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | grep -E "^$1=" | head -n1 | cut -d= -f2- || true; }

          DB_HOST="$DB_SVC"
          DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"

          trap '
            echo "::group::PHP logs"; docker compose logs --no-color --tail=200 "$PHP_SVC" || true; echo "::endgroup::"
            echo "::group::Apache logs"; docker compose logs --no-color --tail=200 apache || true; echo "::endgroup::"
            echo "::group::DB logs"; docker compose logs --no-color --tail=200 "$DB_SVC" || true; echo "::endgroup::"
          ' ERR

          echo "== PHP modules =="
          docker compose exec -T "$PHP_SVC" sh -lc 'php -v && php -m | sort | egrep -i "mysqli|pdo_mysql|curl|zip|gd|mbstring|xml" -n || true'

          echo "== DB connectivity from PHP container =="
          docker compose exec -T "$PHP_SVC" sh -lc "php -r '
            \$m=new mysqli(\"$DB_HOST\",\"$DB_USER\",\"$DB_PASS\",\"$DB_NAME\",$DB_PORT);
            if(\$m->connect_errno){fwrite(STDERR,\"mysqli connect failed: \".\$m->connect_error.\"\\n\"); exit(2);} echo \"mysqli ok\\n\"; \$m->close();
          '"

          echo "== Running installer =="
          docker compose exec -T "$PHP_SVC" sh -lc "php -d display_errors=1 -d error_reporting=32767 '$INSTALLER' install \
            --db_hostname '$DB_HOST' \
            --db_username '$DB_USER' \
            --db_password '$DB_PASS' \
            --db_database '$DB_NAME' \
            --db_driver mysqli \
            --db_port '$DB_PORT' \
            --username admin \
            --password admin123 \
            --email admin@example.com \
            --http_server '${LOCAL_BASE_URL%/}/'"

          docker compose exec -T "$PHP_SVC" sh -lc 'rm -rf /var/www/html/upload/install /var/www/upload/install 2>/dev/null || true'

      - name: Silence PHP notices via .user.ini (applies per-request)
        shell: bash
        run: |
          set -euo pipefail
          : "${PHP_SVC:=php}"
          docker compose exec -T "$PHP_SVC" sh -lc '
            set -e
            DOCROOT=""
            for d in /var/www/html/upload /var/www/upload; do
              if [ -d "$d" ]; then DOCROOT="$d"; break; fi
            done
            [ -z "$DOCROOT" ] && { echo "Docroot not found"; exit 1; }
            cat > "$DOCROOT/.user.ini" <<INI
            display_errors=0
            display_startup_errors=0
            error_reporting=E_ALL & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED & ~E_STRICT
            INI
          '
          # No restart needed; .user.ini is read on each request

      - name: Ensure default currency set (USD) & disable OC error display
        shell: bash
        run: |
          set -eo pipefail
          : "${DB_SVC:=mysql}"
          PREFIX="${DB_PREFIX:-oc_}"
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | grep -E "^$1=" | head -n1 | cut -d= -f2- || true; }

          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)" || true
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)" || true
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)" || true
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)" || true
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"

          READ_SQL="SELECT value FROM ${PREFIX}setting WHERE store_id=0 AND code='config' AND \`key\`='config_currency' LIMIT 1;"
          VAL="$(docker compose exec -T "$DB_SVC" sh -lc \
            "mysql -N -s -h $DB_HOST -P $DB_PORT -u'$DB_USER' -p'$DB_PASS' '$DB_NAME' -e \"$READ_SQL\"" || true)"
          if [ -z "$VAL" ]; then
            UPSERT_CCY="INSERT INTO ${PREFIX}setting (store_id, code, \`key\`, value)
                        VALUES (0,'config','config_currency','USD')
                        ON DUPLICATE KEY UPDATE value='USD';"
            docker compose exec -T "$DB_SVC" sh -lc \
              "mysql -h $DB_HOST -P $DB_PORT -u'$DB_USER' -p'$DB_PASS' '$DB_NAME' -e \"$UPSERT_CCY\"" || true
          fi
          UPSERT_ERRDISP="INSERT INTO ${PREFIX}setting (store_id, code, \`key\`, value)
                          VALUES (0,'config','config_error_display','0')
                          ON DUPLICATE KEY UPDATE value='0';"
          docker compose exec -T "$DB_SVC" sh -lc \
            "mysql -h $DB_HOST -P $DB_PORT -u'$DB_USER' -p'$DB_PASS' '$DB_NAME' -e \"$UPSERT_ERRDISP\"" || true

      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          set -e
          for i in {1..90}; do
            if curl -fsS -o /dev/null -L "$LOCAL_BASE_URL"; then
              echo "OpenCart is up at $LOCAL_BASE_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/90)"; sleep 3
          done
          echo "::group::Recent container logs"
          docker compose logs --no-color --tail=300
          echo "::endgroup::"
          exit 1

      - name: Verify HTTP headers (sanity)
        run: curl -LI "$LOCAL_BASE_URL" || true

      - name: Setup Node.js (for testRigor CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install testRigor CLI
        run: |
          npm i -g testrigor-cli
          testrigor --version || true
          npx -y testrigor-cli --version || true

      - name: Trigger testRigor suite against localhost
        env:
          TESTRIGOR_CI_TOKEN: ${{ secrets.TESTRIGOR_CI_TOKEN }}
        run: |
          echo "Suite ID: $TESTRIGOR_SUITE_ID"
          echo "URL:      $LOCAL_BASE_URL"
          npx -y testrigor-cli test-suite run "$TESTRIGOR_SUITE_ID" \
            --token "$TESTRIGOR_CI_TOKEN" \
            --localhost --url "$LOCAL_BASE_URL" \
            --verbose
