name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: ["**"]
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start services (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --build --remove-orphans --quiet-pull
          docker compose ps

      - name: Detect services and URL
        shell: bash
        run: |
          set -euo pipefail
          WEB_SVC="apache"
          PHP_SVC="php"
          DB_SVC="mysql"

          # Autodetect PHP service if named differently
          if ! docker compose ps --services | grep -qx "$PHP_SVC"; then
            PHP_SVC=""
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'command -v php >/dev/null 2>&1'; then
                PHP_SVC="$s"; break
              fi
            done
          fi

          # Autodetect web/db if necessary
          if ! docker compose ps --services | grep -qx "$WEB_SVC"; then
            WEB_SVC="$(docker compose ps --services | head -n 1)"
          fi
          if ! docker compose ps --services | grep -qx "$DB_SVC"; then
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'test -d /var/lib/mysql || test -d /bitnami/mariadb'; then
                DB_SVC="$s"; break
              fi
            done
          fi

          [ -z "$PHP_SVC" ] && { echo "::error::No container with PHP CLI found"; docker compose ps; exit 1; }

          echo "WEB_SVC=$WEB_SVC" >> "$GITHUB_ENV"
          echo "PHP_SVC=$PHP_SVC" >> "$GITHUB_ENV"
          echo "DB_SVC=$DB_SVC"   >> "$GITHUB_ENV"

          # Optional CLI installer path
          INSTALLER=""
          for p in /var/www/upload/install/cli_install.php /var/www/html/upload/install/cli_install.php; do
            if docker compose exec -T "$PHP_SVC" sh -lc "test -f $p"; then INSTALLER="$p"; break; fi
          done
          echo "INSTALLER=$INSTALLER" >> "$GITHUB_ENV"

          # Local base URL (published port)
          PORT="$(docker compose port "$WEB_SVC" 80 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n 1 || true)"
          if [ -z "$PORT" ]; then
            PORT="$(docker compose port "$WEB_SVC" 8080 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n 1 || true)"
          fi
          if [ -z "$PORT" ] || [ "$PORT" = "80" ]; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost:$PORT" >> "$GITHUB_ENV"
          fi

      - name: Wait for DB to be ready
        shell: bash
        run: |
          set -euo pipefail
          CID="$(docker compose ps -q "$DB_SVC")"
          [ -z "$CID" ] && { echo "::error::Cannot find DB container for $DB_SVC"; docker compose ps; exit 1; }
          echo "Waiting for DB container ($DB_SVC)…"
          for i in {1..60}; do
            STATUS="$(docker inspect -f '{{.State.Health.Status}}' "$CID" 2>/dev/null || echo unknown)"
            if [ "$STATUS" = "healthy" ]; then echo "DB healthy"; break; fi
            echo "DB health: $STATUS ($i/60)"; sleep 2
            if [ "$i" -eq 60 ]; then
              echo "::warning::Healthcheck timeout; trying mysqladmin ping…"
              docker compose exec -T "$DB_SVC" sh -lc \
                "mysqladmin ping -h 127.0.0.1 --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot -p\${MYSQL_ROOT_PASSWORD:-\${MARIADB_ROOT_PASSWORD:-}} --silent" \
                || { echo '::error::DB did not respond to mysqladmin ping'; docker compose logs --no-color --tail=200 "$DB_SVC"; exit 1; }
              break
            fi
          done

      - name: Prepare config files and permissions
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" sh -lc '
            set -e
            ROOT=""
            for b in /var/www/html /var/www; do
              if [ -f "$b/upload/config-dist.php" ] || [ -f "$b/upload/config.php" ]; then ROOT="$b"; break; fi
            done
            [ -z "$ROOT" ] && { echo "Cannot locate /var/www*/upload"; exit 1; }
            cp -n "$ROOT/upload/config-dist.php" "$ROOT/upload/config.php" || true
            cp -n "$ROOT/upload/admin/config-dist.php" "$ROOT/upload/admin/config.php" || true
            chmod 666 "$ROOT/upload/config.php" "$ROOT/upload/admin/config.php" || true
            chown -R www-data:www-data "$ROOT/upload" || true
          '

      - name: Install OpenCart via CLI (if present)
        if: env.INSTALLER != ''
        shell: bash
        run: |
          set -euo pipefail
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"
          docker compose exec -T "$PHP_SVC" sh -lc "php -d display_errors=1 -d error_reporting=32767 '$INSTALLER' install \
            --db_hostname '$DB_HOST' \
            --db_username '$DB_USER' \
            --db_password '$DB_PASS' \
            --db_database '$DB_NAME' \
            --db_driver mysqli \
            --db_port '$DB_PORT' \
            --username admin \
            --password admin123 \
            --email admin@example.com \
            --http_server '${LOCAL_BASE_URL%/}/'"
          docker compose exec -T "$PHP_SVC" sh -lc 'rm -rf /var/www/html/upload/install /var/www/upload/install 2>/dev/null || true'

      - name: Finalize base URLs and DB settings in configs
        shell: bash
        run: |
          set -euo pipefail
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"
          docker compose exec -e LOCAL_BASE_URL="$LOCAL_BASE_URL" \
                              -e DB_HOST="$DB_HOST" -e DB_PORT="$DB_PORT" \
                              -e DB_NAME="$DB_NAME" -e DB_USER="$DB_USER" -e DB_PASS="$DB_PASS" \
                              -T "$PHP_SVC" bash -lc '
            set -e
            ROOT=""
            for b in /var/www/html /var/www; do
              if [ -d "$b/upload" ]; then ROOT="$b"; break; fi
            done
            [ -z "$ROOT" ] && exit 0
            BASE="$ROOT/upload"
            CFG_APP="$BASE/config.php"
            CFG_ADM="$BASE/admin/config.php"
            update_cfg() {
              local file="$1"
              sed -i \
                -e "s|define('\''HTTP_SERVER'\''.*|define('\''HTTP_SERVER'\'', '\''${LOCAL_BASE_URL%/}/'\'');|" \
                -e "s|define('\''HTTP_CATALOG'\''.*|define('\''HTTP_CATALOG'\'', '\''${LOCAL_BASE_URL%/}/'\'');|" \
                -e "s|define('\''DIR_APPLICATION'\''.*|define('\''DIR_APPLICATION'\'', '\''$BASE/catalog/'\'');|" \
                -e "s|define('\''DIR_SYSTEM'\''.*|define('\''DIR_SYSTEM'\'', '\''$BASE/system/'\'');|" \
                -e "s|define('\''DIR_IMAGE'\''.*|define('\''DIR_IMAGE'\'', '\''$BASE/image/'\'');|" \
                -e "s|define('\''DB_DRIVER'\''.*|define('\''DB_DRIVER'\'', '\''mysqli'\'');|" \
                -e "s|define('\''DB_HOSTNAME'\''.*|define('\''DB_HOSTNAME'\'', '\''$DB_HOST'\'');|" \
                -e "s|define('\''DB_USERNAME'\''.*|define('\''DB_USERNAME'\'', '\''$DB_USER'\'');|" \
                -e "s|define('\''DB_PASSWORD'\''.*|define('\''DB_PASSWORD'\'', '\''$DB_PASS'\'');|" \
                -e "s|define('\''DB_DATABASE'\''.*|define('\''DB_DATABASE'\'', '\''$DB_NAME'\'');|" \
                -e "s|define('\''DB_PORT'\''.*|define('\''DB_PORT'\'', '\''$DB_PORT'\'');|" \
                -e "s|define('\''DB_PREFIX'\''.*|define('\''DB_PREFIX'\'', '\''oc_'\'' );|" \
                "$file"
            }
            [ -f "$CFG_APP" ] && update_cfg "$CFG_APP" || true
            [ -f "$CFG_ADM" ] && update_cfg "$CFG_ADM" || true
          '

      # Final, last-wins PHP ini to prevent warnings from rendering as the page
      - name: Silence PHP notices/warnings (last-wins ini)
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" sh -lc '
            INI_DIR="$(php -i | sed -n "s/^Scan this dir for additional \.ini files => //p")"
            [ -d "$INI_DIR" ] || INI_DIR="/usr/local/etc/php/conf.d"
            cat > "$INI_DIR/999-testrigor.ini" <<EOF
          display_errors = Off
          display_startup_errors = Off
          log_errors = On
          error_reporting = E_ALL & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED & ~E_STRICT
          EOF
            php -i | egrep "Loaded Configuration File|additional .ini|error_reporting|display_errors" || true
          '

      - name: Ensure default currency set (USD) in DB
        shell: bash
        run: |
          set -euo pipefail
          PREFIX="${DB_PREFIX:-oc_}"

          # Gather DB connection values from the DB container env
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"
          DB_PORT="${DB_PORT:-3306}"
          DB_HOST_LOCAL="127.0.0.1"

          # Detect a SQL client inside the DB container (mysql or mariadb)
          DB_CLI="$(docker compose exec -T "$DB_SVC" sh -lc 'if command -v mysql >/dev/null 2>&1; then echo mysql; elif command -v mariadb >/dev/null 2>&1; then echo mariadb; else echo ""; fi')"
          if [ -z "$DB_CLI" ]; then
            echo "::error::No mysql/mariadb client found in DB container '$DB_SVC'."; exit 1
          fi
          echo "Using DB client: $DB_CLI"

          # Ensure tables exist (fail early with a clear message)
          docker compose exec -T "$DB_SVC" sh -lc \
            "$DB_CLI -h $DB_HOST_LOCAL -P $DB_PORT -u'$DB_USER' -p'$DB_PASS' '$DB_NAME' -e \"SHOW TABLES LIKE '${PREFIX}setting'\" | grep -q ${PREFIX}setting" \
            || { echo '::error::OpenCart tables missing. Ensure the installer step ran.'; exit 1; }

          # Use quoted heredoc so backticks in `key` aren't eaten by the shell
          docker compose exec -T "$DB_SVC" sh -lc '
            set -e
            DB_CLI=$(command -v mysql || command -v mariadb)
            DB_HOST="'"$DB_HOST_LOCAL"'"
            DB_PORT="'"$DB_PORT"'"
            DB_NAME="'"$DB_NAME"'"
            DB_USER="'"$DB_USER"'"
            DB_PASS="'"$DB_PASS"'"
            PFX="'"$PREFIX"'"

            cat > /tmp/upsert.sql <<'"'"'SQL'"'"'
          UPDATE __PFX__setting
             SET value='\''USD'\''
           WHERE code='\''config'\'' AND `key`='\''config_currency'\'';

          INSERT INTO __PFX__setting (store_id, code, `key`, value)
          SELECT 0, '\''config'\'', '\''config_currency'\'', '\''USD'\''
          WHERE NOT EXISTS (
            SELECT 1 FROM __PFX__setting
             WHERE code='\''config'\'' AND `key`='\''config_currency'\''
          );
          SQL
            sed -i "s/__PFX__/${PFX}/g" /tmp/upsert.sql
            $DB_CLI -h "$DB_HOST" -P "$DB_PORT" -u"$DB_USER" -p"$DB_PASS" "$DB_NAME" < /tmp/upsert.sql
          '

      - name: Patch product/thumb.php to be currency-safe
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" bash -lc '
            set -e
            for base in /var/www/html/upload /var/www/upload; do
              f="$base/catalog/controller/product/thumb.php"
              [ -f "$f" ] || continue

              # Replace raw reads with a safe fallback (idempotent)
              sed -i -E "s/\$this->session->data\[([\"'"'"'])currency\1\]/(\$this->session->data['"'"'currency'"'"'] ?? \$this->config->get('"'"'config_currency'"'"') ?: '"'"'USD'"'"')/g" "$f"

              # If the file still doesn't contain config_currency anywhere, insert a guard at the start of index()
              if ! grep -q "config_currency" "$f"; then
                awk '"'"'
                  BEGIN{inserted=0}
                  /public[[:space:]]+function[[:space:]]+index[[:space:]]*\(/{
                    print $0
                    getline
                    if ($0 ~ /{/) {
                      print "{"
                      print "        if (!isset($this->session->data[\"currency\"])) {"
                      print "            $this->session->data[\"currency\"] = $this->config->get(\"config_currency\") ?: \"USD\";"
                      print "        }"
                      inserted=1
                      next
                    }
                  }
                  { print }
                  END{ if(!inserted){ /* no-op if pattern not found */ } }
                '"'"' "$f" > "$f.new" && mv "$f.new" "$f"
              fi

              echo "Patched: $f"
              nl -ba "$f" | sed -n "1,140p"
            done
          '

      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          set -euo pipefail
          HOME_URL="${LOCAL_BASE_URL%/}/index.php?route=common/home"
          for i in {1..90}; do
            if curl -fsS -o /dev/null -L "$HOME_URL"; then
              echo "OpenCart is up at $HOME_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/90)"; sleep 3
          done
          echo "::group::Recent container logs"
          docker compose logs --no-color --tail=300
          echo "::endgroup::"
          exit 1

      - name: Verify HTTP headers (sanity)
        run: |
          HOME_URL="${LOCAL_BASE_URL%/}/index.php?route=common/home"
          curl -LI "$HOME_URL" || true

      - name: Setup Node.js for testRigor CLI
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install testRigor CLI
        run: |
          npm i -g testrigor-cli
          testrigor --version || true
          npx -y testrigor-cli --version || true

      - name: Trigger testRigor suite against localhost
        env:
          TESTRIGOR_CI_TOKEN: ${{ secrets.TESTRIGOR_CI_TOKEN }}
        run: |
          HOME_URL="${LOCAL_BASE_URL%/}/index.php?route=common/home"
          echo "Suite ID: $TESTRIGOR_SUITE_ID"
          echo "URL:      $HOME_URL"
          npx -y testrigor-cli test-suite run "$TESTRIGOR_SUITE_ID" \
            --token "$TESTRIGOR_CI_TOKEN" \
            --localhost --url "$HOME_URL" \
            --verbose

      - name: Dump logs on failure
        if: failure()
        run: docker compose logs --no-color --tail=200
