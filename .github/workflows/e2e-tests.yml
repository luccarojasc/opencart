name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: ["**"]
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start services (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --build --remove-orphans --quiet-pull
          docker compose ps

      - name: Detect services and URL
        shell: bash
        run: |
          set -euo pipefail
          WEB_SVC="apache"
          PHP_SVC="php"
          DB_SVC="mysql"

          # Autodetect PHP service
          if ! docker compose ps --services | grep -qx "$PHP_SVC"; then
            PHP_SVC=""
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'command -v php >/dev/null 2>&1'; then
                PHP_SVC="$s"; break
              fi
            done
          fi

          # Autodetect web/db if needed
          if ! docker compose ps --services | grep -qx "$WEB_SVC"; then
            WEB_SVC="$(docker compose ps --services | head -n 1)"
          fi
          if ! docker compose ps --services | grep -qx "$DB_SVC"; then
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'test -d /var/lib/mysql || test -d /bitnami/mariadb'; then
                DB_SVC="$s"; break
              fi
            done
          fi

          [ -z "$PHP_SVC" ] && { echo "::error::No container with PHP CLI found"; docker compose ps; exit 1; }

          echo "WEB_SVC=$WEB_SVC" >> "$GITHUB_ENV"
          echo "PHP_SVC=$PHP_SVC" >> "$GITHUB_ENV"
          echo "DB_SVC=$DB_SVC"   >> "$GITHUB_ENV"

          # Optional CLI installer path
          INSTALLER=""
          for p in /var/www/upload/install/cli_install.php /var/www/html/upload/install/cli_install.php; do
            if docker compose exec -T "$PHP_SVC" sh -lc "test -f $p"; then INSTALLER="$p"; break; fi
          done
          echo "INSTALLER=$INSTALLER" >> "$GITHUB_ENV"

          # Local base URL (published port)
          PORT="$(docker compose port "$WEB_SVC" 80 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)"
          if [ -z "$PORT" ]; then
            PORT="$(docker compose port "$WEB_SVC" 8080 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)"
          fi
          if [ -z "$PORT" ] || [ "$PORT" = "80" ]; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost:$PORT" >> "$GITHUB_ENV"
          fi

      - name: Wait for DB to be ready
        shell: bash
        run: |
          set -euo pipefail
          CID="$(docker compose ps -q "$DB_SVC")"
          [ -z "$CID" ] && { echo "::error::Cannot find DB container for $DB_SVC"; docker compose ps; exit 1; }
          echo "Waiting for DB container ($DB_SVC)…"
          for i in {1..60}; do
            STATUS="$(docker inspect -f '{{.State.Health.Status}}' "$CID" 2>/dev/null || echo unknown)"
            if [ "$STATUS" = "healthy" ]; then echo "DB healthy"; break; fi
            echo "DB health: $STATUS ($i/60)"; sleep 2
            if [ "$i" -eq 60 ]; then
              echo "::warning::Healthcheck timeout; trying mysqladmin ping…"
              docker compose exec -T "$DB_SVC" sh -lc \
                "mysqladmin ping -h 127.0.0.1 --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot --silent || \
                 mysqladmin ping -h 127.0.0.1 -uroot -p\${MYSQL_ROOT_PASSWORD:-\${MARIADB_ROOT_PASSWORD:-}} --silent" \
                || { echo '::error::DB did not respond to mysqladmin ping'; docker compose logs --no-color --tail=200 "$DB_SVC"; exit 1; }
              break
            fi
          done

      - name: Prepare config files and permissions
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" sh -lc '
            set -e
            ROOT=""
            for b in /var/www/html /var/www; do
              if [ -f "$b/upload/config-dist.php" ] || [ -f "$b/upload/config.php" ]; then ROOT="$b"; break; fi
            done
            [ -z "$ROOT" ] && { echo "Cannot locate /var/www*/upload"; exit 1; }
            cp -n "$ROOT/upload/config-dist.php" "$ROOT/upload/config.php" || true
            cp -n "$ROOT/upload/admin/config-dist.php" "$ROOT/upload/admin/config.php" || true
            chmod 666 "$ROOT/upload/config.php" "$ROOT/upload/admin/config.php" || true
            chown -R www-data:www-data "$ROOT/upload" || true
          '

      - name: Install OpenCart via CLI (if present)
        if: env.INSTALLER != ''
        shell: bash
        run: |
          set -euo pipefail
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"

          docker compose exec -T "$PHP_SVC" sh -lc "php -d display_errors=1 -d error_reporting=32767 '$INSTALLER' install \
            --db_hostname '$DB_HOST' \
            --db_username '$DB_USER' \
            --db_password '$DB_PASS' \
            --db_database '$DB_NAME' \
            --db_driver mysqli \
            --db_port '$DB_PORT' \
            --username admin \
            --password admin123 \
            --email admin@example.com \
            --http_server '${LOCAL_BASE_URL%/}/'"

          docker compose exec -T "$PHP_SVC" sh -lc 'rm -rf /var/www/html/upload/install /var/www/upload/install 2>/dev/null || true'

      # --- SAFE: write a PHP patcher via a host-side heredoc piped into the container ---
      - name: Finalize base URLs and DB settings in configs
        shell: bash
        run: |
          set -euo pipefail
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"

          cat <<'PHP' | docker compose exec -T \
            -e LOCAL_BASE_URL="$LOCAL_BASE_URL" \
            -e DB_HOST="$DB_HOST" -e DB_PORT="$DB_PORT" \
            -e DB_NAME="$DB_NAME" -e DB_USER="$DB_USER" -e DB_PASS="$DB_PASS" \
            "$PHP_SVC" bash -lc 'cat > /tmp/oc_cfg_patch.php && php /tmp/oc_cfg_patch.php'
          <?php
          $base = null;
          foreach (["/var/www/html/upload", "/var/www/upload"] as $b) {
            if (is_dir($b)) { $base = $b; break; }
          }
          if (!$base) { exit(0); }

          $cfgApp = "$base/config.php";
          $cfgAdm = "$base/admin/config.php";

          $http = rtrim(getenv("LOCAL_BASE_URL") ?: "http://localhost", "/") . "/";
          $db = [
            "host" => getenv("DB_HOST") ?: "localhost",
            "port" => getenv("DB_PORT") ?: "3306",
            "name" => getenv("DB_NAME") ?: "opencart",
            "user" => getenv("DB_USER") ?: "root",
            "pass" => getenv("DB_PASS") ?: "",
          ];
          
          function rewriteCfg($file, $base, $http, $db) {
            if (!is_file($file)) return;
            $c = file_get_contents($file);
            $map = [
              "/define\\('HTTP_SERVER'.*/"     => "define('HTTP_SERVER', '$http');",
              "/define\\('HTTP_CATALOG'.*/"    => "define('HTTP_CATALOG', '$http');",
              "/define\\('DIR_APPLICATION'.*/" => "define('DIR_APPLICATION', '{$base}/catalog/');",
              "/define\\('DIR_SYSTEM'.*/"      => "define('DIR_SYSTEM', '{$base}/system/');",
              "/define\\('DIR_IMAGE'.*/"       => "define('DIR_IMAGE', '{$base}/image/');",
               "/define\\('DB_DRIVER'.*/"       => "define('DB_DRIVER', 'mysqli');",
              "/define\\('DB_HOSTNAME'.*/"     => "define('DB_HOSTNAME', '{$db['host']}');",
              "/define\\('DB_USERNAME'.*/"     => "define('DB_USERNAME', '{$db['user']}');",
              "/define\\('DB_PASSWORD'.*/"     => "define('DB_PASSWORD', '{$db['pass']}');",
              "/define\\('DB_DATABASE'.*/"     => "define('DB_DATABASE', '{$db['name']}');",
              "/define\\('DB_PORT'.*/"         => "define('DB_PORT', '{$db['port']}');",
              "/define\\('DB_PREFIX'.*/"       => "define('DB_PREFIX', 'oc_');",
            ];
            foreach ($map as $re => $rep) { $c = preg_replace($re, $rep, $c); }
            file_put_contents($file, $c);
            echo "Patched: $file\n";
          }

          rewriteCfg($cfgApp, $base, $http, $db);
          rewriteCfg($cfgAdm, $base, $http, $db);
          PHP

      - name: Silence PHP notices globally (.user.ini)
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" bash -lc '
            for root in /var/www/html/upload /var/www/upload /var/www/html /var/www; do
              [ -d "$root" ] || continue
              cat > "$root/.user.ini" <<'"'"'INI'"'"'
          display_errors = 0
          display_startup_errors = 0
          error_reporting = E_ALL & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED & ~E_STRICT
          INI
              echo "Wrote $root/.user.ini"
            done
          '

      - name: Force disable display_errors in entrypoints
        shell: bash
        run: |
          set -euo pipefail
          docker compose exec -T "$PHP_SVC" bash -lc '
            for idx in /var/www/html/upload/index.php /var/www/upload/index.php /var/www/html/upload/admin/index.php /var/www/upload/admin/index.php; do
              [ -f "$idx" ] || continue
              sed -i "1s|<?php|<?php @ini_set('\''display_errors'\'',0); @ini_set('\''display_startup_errors'\'',0); error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED & ~E_STRICT); |" "$idx"
              head -n 1 "$idx"
            done
          '

      - name: Ensure default currency set (USD) in DB
        shell: bash
        run: |
          set -euo pipefail
          PREFIX="${DB_PREFIX:-oc_}"
          DB_ENV="$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)"
          getv() { echo "$DB_ENV" | awk -F= -v k="$1" 'index($0,k"=")==1{print substr($0,length(k)+2)}'; }
          DB_HOST="$DB_SVC"; DB_PORT="${DB_PORT:-3306}"
          DB_NAME="$(getv MYSQL_DATABASE)";   [ -z "$DB_NAME" ] && DB_NAME="$(getv MARIADB_DATABASE)"
          DB_USER="$(getv MYSQL_USER)";       [ -z "$DB_USER" ] && DB_USER="$(getv MARIADB_USER)"
          DB_PASS="$(getv MYSQL_PASSWORD)";   [ -z "$DB_PASS" ] && DB_PASS="$(getv MARIADB_PASSWORD)"
          ROOT_PW="$(getv MYSQL_ROOT_PASSWORD)"; [ -z "$ROOT_PW" ] && ROOT_PW="$(getv MARIADB_ROOT_PASSWORD)"
          if [ -z "$DB_USER" ]; then DB_USER="root"; DB_PASS="$ROOT_PW"; fi
          : "${DB_NAME:=opencart}"

          UPSERT_CCY="INSERT INTO ${PREFIX}setting (store_id, code, \`key\`, value)
                      VALUES (0,'config','config_currency','USD')
                      ON DUPLICATE KEY UPDATE value='USD';"
          docker compose exec -T "$DB_SVC" sh -lc \
            "mysql -h $DB_HOST -P $DB_PORT -u'$DB_USER' -p'$DB_PASS' '$DB_NAME' -e \"$UPSERT_CCY\"" || true

      - name: Patch currency reads with default fallback
        shell: bash
        run: |
          set -euo pipefail
          cat <<'PHP' | docker compose exec -T "$PHP_SVC" bash -lc 'cat > /tmp/oc_currency_patch.php && php /tmp/oc_currency_patch.php'
          <?php
          $targets = [
            "/var/www/html/upload/catalog/controller/product/thumb.php",
            "/var/www/upload/catalog/controller/product/thumb.php",
          ];
          foreach ($targets as $f) {
            if (!is_file($f)) continue;
            $c = file_get_contents($f);
            $c = preg_replace(
              "/\\$this->session->data\\s*\\[\\s*[\"\\']currency[\"\\']\\s*\\]/",
              "(\$this->session->data['currency'] ?? \$this->config->get('config_currency'))",
              $c,
              -1,
              $n
            );
            file_put_contents($f, $c);
            echo $f, ": ", $n, " replacement(s)\n";
          }
          PHP

      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..90}; do
            if curl -fsS -o /dev/null -L "$LOCAL_BASE_URL"; then
              echo "OpenCart is up at $LOCAL_BASE_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/90)"; sleep 3
          done
          echo "::group::Recent container logs"
          docker compose logs --no-color --tail=300
          echo "::endgroup::"
          exit 1

      - name: Verify HTTP headers (sanity)
        run: curl -LI "$LOCAL_BASE_URL" || true

      - name: Setup Node.js for testRigor CLI
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install testRigor CLI
        run: |
          npm i -g testrigor-cli
          testrigor --version || true
          npx -y testrigor-cli --version || true

      - name: Trigger testRigor suite against localhost
        env:
          TESTRIGOR_CI_TOKEN: ${{ secrets.TESTRIGOR_CI_TOKEN }}
        run: |
          echo "Suite ID: $TESTRIGOR_SUITE_ID"
          echo "URL:      $LOCAL_BASE_URL"
          npx -y testrigor-cli test-suite run "$TESTRIGOR_SUITE_ID" \
            --token "$TESTRIGOR_CI_TOKEN" \
            --localhost --url "$LOCAL_BASE_URL" \
            --verbose
