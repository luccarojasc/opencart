name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start OpenCart (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --build --remove-orphans --quiet-pull
          docker compose ps

      - name: Discover services & published port
        shell: bash
        run: |
          set -euo pipefail

          echo "All services:"
          docker compose ps --services

          # Find web service (has OpenCart 'upload/install/cli_install.php')
          WEB_SVC=""
          for s in $(docker compose ps --services); do
            if docker compose exec -T "$s" sh -lc 'test -f /var/www/upload/install/cli_install.php' 2>/dev/null; then
              WEB_SVC="$s"; INSTALLER="/var/www/upload/install/cli_install.php"; break
            fi
            if docker compose exec -T "$s" sh -lc 'test -f /var/www/html/upload/install/cli_install.php' 2>/dev/null; then
              WEB_SVC="$s"; INSTALLER="/var/www/html/upload/install/cli_install.php"; break
            fi
          done
          if [ -z "$WEB_SVC" ]; then
            echo "::error::Unable to locate web service containing the OpenCart installer"
            docker compose ps
            exit 1
          fi
          echo "WEB_SVC=$WEB_SVC"           >> "$GITHUB_ENV"
          echo "INSTALLER=$INSTALLER"       >> "$GITHUB_ENV"

          # Try to identify DB service
          DB_SVC=""
          for s in $(docker compose ps --services); do
            if docker compose exec -T "$s" sh -lc 'command -v mysql >/dev/null 2>&1' 2>/dev/null; then
              DB_SVC="$s"; break
            fi
          done
          # Fallbacks by common names
          if [ -z "$DB_SVC" ]; then
            for guess in db mysql mariadb database; do
              if docker compose ps --services | grep -qx "$guess"; then DB_SVC="$guess"; break; fi
            done
          fi
          if [ -z "$DB_SVC" ]; then
            echo "::error::Unable to locate DB service"
            docker compose ps
            exit 1
          fi
          echo "DB_SVC=$DB_SVC"             >> "$GITHUB_ENV"

          # Derive published HTTP port (try container 80, then 8080)
          HOST_PORT=$(docker compose port "$WEB_SVC" 80 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)
          if [ -z "${HOST_PORT:-}" ]; then
            HOST_PORT=$(docker compose port "$WEB_SVC" 8080 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1 || true)
          fi
          if [ -z "${HOST_PORT:-}" ] || [ "$HOST_PORT" = "80" ]; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost:$HOST_PORT" >> "$GITHUB_ENV"
          fi

      - name: Install OpenCart (CLI)
        shell: bash
        run: |
          set -euo pipefail
          echo "Using WEB_SVC=$WEB_SVC, DB_SVC=$DB_SVC, INSTALLER=$INSTALLER"
          echo "LOCAL_BASE_URL=$LOCAL_BASE_URL"

          # Read DB env values from the DB container if present
          DB_ENV=$(docker compose exec -T "$DB_SVC" sh -lc 'env | egrep "MYSQL_|MARIADB_"' || true)
          echo "DB env from container:"
          echo "$DB_ENV"

          # Defaults (override if envs exist)
          DB_HOST="$DB_SVC"
          DB_PORT="3306"
          DB_NAME="opencart"
          DB_USER="root"
          DB_PASS="root"

          # Prefer MYSQL_* then MARIADB_* if found
          DB_NAME_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MYSQL_DATABASE='  | cut -d= -f2- || true)
          DB_USER_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MYSQL_USER='      | cut -d= -f2- || true)
          DB_PASS_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MYSQL_PASSWORD='  | cut -d= -f2- || true)
          ROOT_FROM_ENV=$(echo    "$DB_ENV" | egrep -m1 '^MYSQL_ROOT_PASSWORD=' | cut -d= -f2- || true)

          if [ -z "$DB_NAME_FROM_ENV" ]; then
            DB_NAME_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MARIADB_DATABASE=' | cut -d= -f2- || true)
          fi
          if [ -z "$DB_USER_FROM_ENV" ]; then
            DB_USER_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MARIADB_USER=' | cut -d= -f2- || true)
          fi
          if [ -z "$DB_PASS_FROM_ENV" ]; then
            DB_PASS_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MARIADB_PASSWORD=' | cut -d= -f2- || true)
          fi
          ROOT_MARIA_FROM_ENV=$(echo "$DB_ENV" | egrep -m1 '^MARIADB_ROOT_PASSWORD=' | cut -d= -f2- || true)

          if [ -n "$DB_NAME_FROM_ENV" ]; then DB_NAME="$DB_NAME_FROM_ENV"; fi
          if [ -n "$DB_USER_FROM_ENV" ]; then DB_USER="$DB_USER_FROM_ENV"; fi
          if [ -n "$DB_PASS_FROM_ENV" ]; then DB_PASS="$DB_PASS_FROM_ENV"; elif [ -n "$ROOT_FROM_ENV" ]; then DB_USER="root"; DB_PASS="$ROOT_FROM_ENV"; elif [ -n "$ROOT_MARIA_FROM_ENV" ]; then DB_USER="root"; DB_PASS="$ROOT_MARIA_FROM_ENV"; fi

          # Some images use /var/www/html; the path was detected earlier
          docker compose exec -T "$WEB_SVC" sh -lc "php '$INSTALLER' install \
            --db_hostname '$DB_HOST' \
            --db_username '$DB_USER' \
            --db_password '$DB_PASS' \
            --db_database '$DB_NAME' \
            --db_driver mysqli \
            --db_port '$DB_PORT' \
            --username admin \
            --password admin123 \
            --email admin@example.com \
            --http_server '${LOCAL_BASE_URL%/}/'"

      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS -o /dev/null -L "$LOCAL_BASE_URL"; then
              echo "OpenCart is up at $LOCAL_BASE_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/60)"; sleep 5
          done
          echo "OpenCart failed to start in time" >&2; exit 1

      - name: Verify HTTP headers (sanity)
        run: curl -LI "$LOCAL_BASE_URL" || true

      - name: Setup Node.js (for testRigor CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install testRigor CLI
        run: |
          npm i -g testrigor-cli
          testrigor --version || true
          npx -y testrigor-cli --version

      - name: Trigger testRigor suite against localhost
        env:
          TESTRIGOR_CI_TOKEN: ${{ secrets.TESTRIGOR_CI_TOKEN }}
        run: |
          echo "Suite ID: $TESTRIGOR_SUITE_ID"
          echo "URL:      $LOCAL_BASE_URL"
          # Use npx to guarantee the right binary
          npx -y testrigor-cli test-suite run "$TESTRIGOR_SUITE_ID" \
            --token "$TESTRIGOR_CI_TOKEN" \
            --localhost --url "$LOCAL_BASE_URL" \
            --verbose
