name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: ["**"]
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start services (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --build --remove-orphans --quiet-pull
          docker compose ps

      - name: Detect services and URL
        shell: bash
        run: |
          set -e
          # Defaults based on the OpenCart repo compose
          WEB_SVC=apache
          PHP_SVC=php
          DB_SVC=mysql

          # Verify / autodetect if names differ
          if ! docker compose ps --services | grep -qx "$PHP_SVC"; then
            PHP_SVC=""
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'command -v php >/dev/null 2>&1' 2>/dev/null; then
                PHP_SVC="$s"; break
              fi
            done
          fi
          if ! docker compose ps --services | grep -qx "$WEB_SVC"; then
            WEB_SVC=$(docker compose ps --services | head -n1)
          fi
          if ! docker compose ps --services | grep -qx "$DB_SVC"; then
            for s in $(docker compose ps --services); do
              if docker compose exec -T "$s" sh -lc 'test -d /var/lib/mysql || test -d /bitnami/mariadb' >/dev/null 2>&1; then
                DB_SVC="$s"; break
              fi
            done
          fi

          if [ -z "$PHP_SVC" ]; then echo "::error::No container with PHP CLI found"; exit 1; fi
          echo "WEB_SVC=$WEB_SVC"   >> "$GITHUB_ENV"
          echo "PHP_SVC=$PHP_SVC"   >> "$GITHUB_ENV"
          echo "DB_SVC=$DB_SVC"     >> "$GITHUB_ENV"

          # Locate installer inside PHP container
          INSTALLER=""
          for p in /var/www/upload/install/cli_install.php /var/www/html/upload/install/cli_install.php; do
            if docker compose exec -T "$PHP_SVC" sh -lc "test -f $p"; then INSTALLER="$p"; break; fi
          done
          if [ -z "$INSTALLER" ]; then
            echo "::error::Could not find upload/install/cli_install.php in $PHP_SVC"
            exit 1
          fi
          echo "INSTALLER=$INSTALLER" >> "$GITHUB_ENV"

          # Derive published HTTP port (80 or 8080 commonly)
          PORT=$(docker compose port "$WEB_SVC" 80 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1)
          if [ -z "$PORT" ]; then
            PORT=$(docker compose port "$WEB_SVC" 8080 2>/dev/null | awk -F: 'NF{print $NF}' | tail -n1)
          fi
          if [ -z "$PORT" ] || [ "$PORT" = "80" ]; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost:$PORT" >> "$GITHUB_ENV"
          fi

      - name: Install OpenCart via CLI
        shell: bash
        run: |
          set -e

          # Pull DB creds from DB container env (handles MYSQL_* or MARIADB_*)
          DB_ENV=$(docker compose exec -T "$DB_SVC" sh -lc 'env' || true)

          val() { echo "$DB_ENV" | grep -E "^$1=" | head -n1 | cut -d= -f2-; }
          DB_HOST="$DB_SVC"; DB_PORT=3306; DB_NAME=opencart; DB_USER=root; DB_PASS=root

          DB_NAME_FROM_ENV=$(val MYSQL_DATABASE);  [ -z "$DB_NAME_FROM_ENV" ]  && DB_NAME_FROM_ENV=$(val MARIADB_DATABASE)
          DB_USER_FROM_ENV=$(val MYSQL_USER);      [ -z "$DB_USER_FROM_ENV" ]  && DB_USER_FROM_ENV=$(val MARIADB_USER)
          DB_PASS_FROM_ENV=$(val MYSQL_PASSWORD);  [ -z "$DB_PASS_FROM_ENV" ]  && DB_PASS_FROM_ENV=$(val MARIADB_PASSWORD)
          ROOT_FROM_ENV=$(val MYSQL_ROOT_PASSWORD);[ -z "$ROOT_FROM_ENV" ]     && ROOT_FROM_ENV=$(val MARIADB_ROOT_PASSWORD)

          [ -n "$DB_NAME_FROM_ENV" ] && DB_NAME="$DB_NAME_FROM_ENV"
