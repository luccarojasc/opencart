name: testRigor E2E on OpenCart (localhost)

on:
  push:
    branches: [ "**" ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      TESTRIGOR_SUITE_ID: ${{ vars.TESTRIGOR_SUITE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

          # Install OpenCart non-interactively (creates config files + seeds DB)
      - name: Install OpenCart (CLI)
        shell: bash
        run: |
          set -e

          echo "Services:"
          docker compose ps --services

          # Find the web/PHP service that has the installer file
          WEB_SVC=""
          for s in $(docker compose ps --services); do
            if docker compose exec -T "$s" sh -lc 'test -f /var/www/upload/install/cli_install.php' 2>/dev/null; then
              WEB_SVC="$s"; break
            fi
            if docker compose exec -T "$s" sh -lc 'test -f /var/www/html/upload/install/cli_install.php' 2>/dev/null; then
              WEB_SVC="$s"; break
            fi
          done
          if [ -z "$WEB_SVC" ]; then
            echo "Could not find service with /var/www/*/upload/install/cli_install.php"; docker compose ps; exit 1
          fi
          echo "Using web service: $WEB_SVC"

          # Guess DB service/creds used by the repo compose (adjust if yours differ)
          DB_HOST="db"
          DB_NAME="opencart"
          DB_USER="root"
          DB_PASS="root"
          DB_PORT="3306"

          # Path may be /var/www/upload or /var/www/html/upload depending on image
          PHP="php"
          INSTALLER="/var/www/upload/install/cli_install.php"
          docker compose exec -T "$WEB_SVC" sh -lc "test -f $INSTALLER || INSTALLER=/var/www/html/upload/install/cli_install.php; $PHP \$INSTALLER install \
            --db_hostname $DB_HOST \
            --db_username $DB_USER \
            --db_password $DB_PASS \
            --db_database $DB_NAME \
            --db_driver mysqli \
            --db_port $DB_PORT \
            --username admin \
            --password admin123 \
            --email admin@example.com \
            --http_server ${LOCAL_BASE_URL%/}/"

      # Now wait for the *configured* store to come up cleanly
      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS -o /dev/null -L "$LOCAL_BASE_URL"; then
              echo "OpenCart is up at $LOCAL_BASE_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/60)"; sleep 5
          done
          echo "OpenCart failed to start in time" >&2; exit 1


      # Start OpenCart using the repo's docker-compose
      - name: Start OpenCart (docker-compose)
        run: |
          docker compose -f docker-compose.yml up -d --remove-orphans
          docker compose ps

      # Detect which port is published and export LOCAL_BASE_URL for later steps
      - name: Detect OpenCart URL
        shell: bash
        run: |
          if curl -fsSI http://localhost >/dev/null; then
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          elif curl -fsSI http://localhost:8080 >/dev/null; then
            echo "LOCAL_BASE_URL=http://localhost:8080" >> "$GITHUB_ENV"
          else
            echo "LOCAL_BASE_URL=http://localhost" >> "$GITHUB_ENV"
          fi

      - name: Wait for OpenCart to be reachable
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS -o /dev/null -L "$LOCAL_BASE_URL"; then
              echo "OpenCart is up at $LOCAL_BASE_URL"; exit 0
            fi
            echo "Waiting for OpenCart... ($i/60)"; sleep 5
          done
          echo "OpenCart failed to start in time" >&2; exit 1

      - name: Verify HTTP headers (sanity)
        run: curl -LI "$LOCAL_BASE_URL" || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install testRigor CLI
        run: npm i -g testrigor-cli

      - name: Verify CLI is installed
        run: |
          which testrigor || true
          testrigor --version || true
          npx -y testrigor-cli --version

      - name: Trigger testRigor suite against localhost
        env:
          TESTRIGOR_CI_TOKEN: ${{ secrets.TESTRIGOR_CI_TOKEN }}
        run: |
          echo "Suite ID: $TESTRIGOR_SUITE_ID"
          echo "URL:      $LOCAL_BASE_URL"
          # Use npx to ensure the correct CLI binary/version is used
          npx -y testrigor-cli test-suite run "$TESTRIGOR_SUITE_ID" \
            --token "$TESTRIGOR_CI_TOKEN" \
            --localhost --url "$LOCAL_BASE_URL" \
            --verbose

